<?php
/**
 * Integer Auto Increment
 *
 * Copyright:
 *
 * IDT Media - Goran Ilic & Tapio Löytty
 * Web: www.i-do-this.com
 * Email: hi@i-do-this.com
 *
 *
 * Authors:
 *
 * Goran Ilic, <ja@ich-mach-das.at>
 * Web: www.ich-mach-das.at
 * 
 * Tapio Löytty, <tapsa@orange-media.fi>
 * Web: www.orange-media.fi
 *
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2014 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class IntegerAutoIncrement extends WireData implements Module
{
	#---------------------
	# Constants
	#---------------------	

	const DB_TBL_SEQUENCE = 'fieldtypeinteger_autoincrement';
	
	#---------------------
	# Module init
	#---------------------	
	
	public function init() 
	{
		$this->addHookAfter('FieldtypeInteger::getConfigInputfields', $this, 'hookGetConfigInputFields');		
		$this->addHookBefore('FieldtypeInteger::savePageField', $this, 'hookSavePageField');		
	}
	
	#---------------------
	# Interface methods
	#---------------------		
	
	static public function getModuleInfo() 
	{
		return array(
			'title' => 'Integer Auto Increment', 
			'author' => 'IDT Media',
			'version' => 001, 
			'summary' => 'Adds additional option to Fieldtype Integer to make it auto increment.',
			'singular' => true, 
			'autoload' => true,
			'requires' => array('PHP>=5.4', 'FieldtypeInteger')
		);
	}	
	
	public function ___install()
	{
        $this->createTable(self::DB_TBL_SEQUENCE, [
            'tpl_id INT UNSIGNED NOT NULL',
            'field_id INT UNSIGNED NOT NULL',
			'seq INT UNSIGNED NOT NULL',
			'PRIMARY KEY (tpl_id, field_id)'
        ]);	
	}
	
	public function ___uninstall()
	{		
		$this->dropTable(self::DB_TBL_SEQUENCE);
	}	

	#---------------------
	# Hooks
	#---------------------		
	
    /**
     * Hook for ___getConfigInputFields
     *
     * @param HookEvent $event Event Object  
     */		
	protected function hookGetConfigInputFields($event)
	{
		$field = $event->arguments(0);
		$inputfields = $event->return;
		$children = $inputfields->get('children'); // Due there is no first() in InputfieldWrapper
				
		$f = $this->wire('modules')->get('InputfieldRadios'); 
		$f->label = $this->_('Auto increment this field?'); 
		$f->description = $this->_('Should this field be auto incremented?');
		$f->attr('name', 'autoIncrement'); 
		$f->addOption(1, $this->_('Yes'));
		$f->addOption(0, $this->_('No'));		 
		$f->attr('value', (int)$field->autoIncrement);		
		$inputfields->insertAfter($f, $children->first()); 
		
		if($field->autoIncrement)
			$inputfields->remove('defaultValue');
	}
	
    /**
     * Hook for ___savePageField
     *
     * @param HookEvent $event Event Object  
     */		
	protected function hookSavePageField($event)
	{
		$page = $event->arguments(0);
		$field = $event->arguments(1);		
		
		$value = $page->get($field->name);
		if(empty($value) && $field->autoIncrement && !$page->hasStatus(Page::statusDeleted)) // This only fails if template is changed, as there is no value reset check!!!
			$page->set($field->name, $this->generateId($page, $field));		
	}
	
	#---------------------
	# Methods
	#---------------------		
	
    /**
     * ID Generator
     *
     * @param Page $page Page Object
     * @param Field $field Field Object     
     * @throws WireDatabaseException on database execution error
     */	
	public function generateId(Page $page, Field $field) 
	{	
		$db = wire('database');
		$tpl = $page->template;
		
		$table = $db->escapeStr(self::DB_TBL_SEQUENCE);

		$query = $db->prepare("SELECT MAX(seq) FROM $table WHERE tpl_id=:tpl_id AND field_id=:field_id");
		$query->bindValue(":tpl_id", $tpl->id, PDO::PARAM_INT);
		$query->bindValue(":field_id", $field->id, PDO::PARAM_INT);
		$query->execute();
				
		if(!$id = $query->fetchColumn())
			$id = 1;
		else
			$id++;

		$query = $db->prepare("INSERT INTO $table (tpl_id, field_id, seq) VALUES (:tpl_id, :field_id, :seq) ON DUPLICATE KEY UPDATE seq=:seq");
		$query->bindValue(":tpl_id", $tpl->id, PDO::PARAM_INT);
		$query->bindValue(":field_id", $field->id, PDO::PARAM_INT);
		$query->bindValue(":seq", $id, PDO::PARAM_INT);								
		$query->execute();	

		return $id;
	}	
	
	#---------------------
	# Database helpers
	#---------------------		
	
    /**
     * Helper method for dropping tables
     * 
     * @param string $table Table name
     */
    protected function dropTable($table) 
	{    
		$database =  $this->wire('database');
	
		$table = $database->escapeStr($table);
	
        $sql = "DROP TABLE $table";

		$query = $database->prepare($sql);
		$result = $query->execute();		
		
		if(!$result) 
			$this->error("Error dropping table '{$table}'");	
    }

    /**
     * Helper method for creating tables
     *
     * @param string $table Table name
     * @param array $schema Table schema
     * @throws WireDatabaseException if table already exists
     */
    protected function createTable($table, $schema) 
	{        
		$engine = $this->wire('config')->dbEngine; 
		$charset = $this->wire('config')->dbCharset;
		$database =  $this->wire('database');
	
		$table = $database->escapeStr($table);
		
        $sql = "CREATE TABLE $table (";
		$sql .= implode(', ', $schema); 
		$sql .= ") ENGINE=$engine DEFAULT CHARSET=$charset";
		
		$query = $database->prepare($sql);
		$result = $query->execute();

		if(!$result) 
			$this->error("Error creating table '{$table}'");		
    }	

}
